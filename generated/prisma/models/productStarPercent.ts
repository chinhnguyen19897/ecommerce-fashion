
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `productStarPercent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model productStarPercent
 * 
 */
export type productStarPercentModel = runtime.Types.Result.DefaultSelection<Prisma.$productStarPercentPayload>

export type AggregateProductStarPercent = {
  _count: ProductStarPercentCountAggregateOutputType | null
  _avg: ProductStarPercentAvgAggregateOutputType | null
  _sum: ProductStarPercentSumAggregateOutputType | null
  _min: ProductStarPercentMinAggregateOutputType | null
  _max: ProductStarPercentMaxAggregateOutputType | null
}

export type ProductStarPercentAvgAggregateOutputType = {
  id: number | null
  productId: number | null
  times: number | null
  star: number | null
}

export type ProductStarPercentSumAggregateOutputType = {
  id: number | null
  productId: number | null
  times: number | null
  star: number | null
}

export type ProductStarPercentMinAggregateOutputType = {
  id: number | null
  productId: number | null
  times: number | null
  star: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductStarPercentMaxAggregateOutputType = {
  id: number | null
  productId: number | null
  times: number | null
  star: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductStarPercentCountAggregateOutputType = {
  id: number
  productId: number
  times: number
  star: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProductStarPercentAvgAggregateInputType = {
  id?: true
  productId?: true
  times?: true
  star?: true
}

export type ProductStarPercentSumAggregateInputType = {
  id?: true
  productId?: true
  times?: true
  star?: true
}

export type ProductStarPercentMinAggregateInputType = {
  id?: true
  productId?: true
  times?: true
  star?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductStarPercentMaxAggregateInputType = {
  id?: true
  productId?: true
  times?: true
  star?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductStarPercentCountAggregateInputType = {
  id?: true
  productId?: true
  times?: true
  star?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProductStarPercentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which productStarPercent to aggregate.
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStarPercents to fetch.
   */
  orderBy?: Prisma.productStarPercentOrderByWithRelationInput | Prisma.productStarPercentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.productStarPercentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStarPercents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStarPercents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned productStarPercents
  **/
  _count?: true | ProductStarPercentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductStarPercentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductStarPercentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductStarPercentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductStarPercentMaxAggregateInputType
}

export type GetProductStarPercentAggregateType<T extends ProductStarPercentAggregateArgs> = {
      [P in keyof T & keyof AggregateProductStarPercent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductStarPercent[P]>
    : Prisma.GetScalarType<T[P], AggregateProductStarPercent[P]>
}




export type productStarPercentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productStarPercentWhereInput
  orderBy?: Prisma.productStarPercentOrderByWithAggregationInput | Prisma.productStarPercentOrderByWithAggregationInput[]
  by: Prisma.ProductStarPercentScalarFieldEnum[] | Prisma.ProductStarPercentScalarFieldEnum
  having?: Prisma.productStarPercentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductStarPercentCountAggregateInputType | true
  _avg?: ProductStarPercentAvgAggregateInputType
  _sum?: ProductStarPercentSumAggregateInputType
  _min?: ProductStarPercentMinAggregateInputType
  _max?: ProductStarPercentMaxAggregateInputType
}

export type ProductStarPercentGroupByOutputType = {
  id: number
  productId: number
  times: number
  star: number
  createdAt: Date
  updatedAt: Date
  _count: ProductStarPercentCountAggregateOutputType | null
  _avg: ProductStarPercentAvgAggregateOutputType | null
  _sum: ProductStarPercentSumAggregateOutputType | null
  _min: ProductStarPercentMinAggregateOutputType | null
  _max: ProductStarPercentMaxAggregateOutputType | null
}

type GetProductStarPercentGroupByPayload<T extends productStarPercentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductStarPercentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductStarPercentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductStarPercentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductStarPercentGroupByOutputType[P]>
      }
    >
  > 



export type productStarPercentWhereInput = {
  AND?: Prisma.productStarPercentWhereInput | Prisma.productStarPercentWhereInput[]
  OR?: Prisma.productStarPercentWhereInput[]
  NOT?: Prisma.productStarPercentWhereInput | Prisma.productStarPercentWhereInput[]
  id?: Prisma.IntFilter<"productStarPercent"> | number
  productId?: Prisma.IntFilter<"productStarPercent"> | number
  times?: Prisma.IntFilter<"productStarPercent"> | number
  star?: Prisma.IntFilter<"productStarPercent"> | number
  createdAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type productStarPercentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
}

export type productStarPercentWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.productStarPercentWhereInput | Prisma.productStarPercentWhereInput[]
  OR?: Prisma.productStarPercentWhereInput[]
  NOT?: Prisma.productStarPercentWhereInput | Prisma.productStarPercentWhereInput[]
  productId?: Prisma.IntFilter<"productStarPercent"> | number
  times?: Prisma.IntFilter<"productStarPercent"> | number
  star?: Prisma.IntFilter<"productStarPercent"> | number
  createdAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type productStarPercentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.productStarPercentCountOrderByAggregateInput
  _avg?: Prisma.productStarPercentAvgOrderByAggregateInput
  _max?: Prisma.productStarPercentMaxOrderByAggregateInput
  _min?: Prisma.productStarPercentMinOrderByAggregateInput
  _sum?: Prisma.productStarPercentSumOrderByAggregateInput
}

export type productStarPercentScalarWhereWithAggregatesInput = {
  AND?: Prisma.productStarPercentScalarWhereWithAggregatesInput | Prisma.productStarPercentScalarWhereWithAggregatesInput[]
  OR?: Prisma.productStarPercentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.productStarPercentScalarWhereWithAggregatesInput | Prisma.productStarPercentScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"productStarPercent"> | number
  productId?: Prisma.IntWithAggregatesFilter<"productStarPercent"> | number
  times?: Prisma.IntWithAggregatesFilter<"productStarPercent"> | number
  star?: Prisma.IntWithAggregatesFilter<"productStarPercent"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"productStarPercent"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"productStarPercent"> | Date | string
}

export type productStarPercentCreateInput = {
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutStarPercentsInput
}

export type productStarPercentUncheckedCreateInput = {
  id?: number
  productId: number
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarPercentUpdateInput = {
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutStarPercentsNestedInput
}

export type productStarPercentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarPercentCreateManyInput = {
  id?: number
  productId: number
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarPercentUpdateManyMutationInput = {
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarPercentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductStarPercentListRelationFilter = {
  every?: Prisma.productStarPercentWhereInput
  some?: Prisma.productStarPercentWhereInput
  none?: Prisma.productStarPercentWhereInput
}

export type productStarPercentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type productStarPercentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarPercentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
}

export type productStarPercentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarPercentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarPercentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  times?: Prisma.SortOrder
  star?: Prisma.SortOrder
}

export type productStarPercentCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput> | Prisma.productStarPercentCreateWithoutProductInput[] | Prisma.productStarPercentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarPercentCreateOrConnectWithoutProductInput | Prisma.productStarPercentCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.productStarPercentCreateManyProductInputEnvelope
  connect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
}

export type productStarPercentUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput> | Prisma.productStarPercentCreateWithoutProductInput[] | Prisma.productStarPercentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarPercentCreateOrConnectWithoutProductInput | Prisma.productStarPercentCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.productStarPercentCreateManyProductInputEnvelope
  connect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
}

export type productStarPercentUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput> | Prisma.productStarPercentCreateWithoutProductInput[] | Prisma.productStarPercentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarPercentCreateOrConnectWithoutProductInput | Prisma.productStarPercentCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.productStarPercentUpsertWithWhereUniqueWithoutProductInput | Prisma.productStarPercentUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.productStarPercentCreateManyProductInputEnvelope
  set?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  disconnect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  delete?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  connect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  update?: Prisma.productStarPercentUpdateWithWhereUniqueWithoutProductInput | Prisma.productStarPercentUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.productStarPercentUpdateManyWithWhereWithoutProductInput | Prisma.productStarPercentUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.productStarPercentScalarWhereInput | Prisma.productStarPercentScalarWhereInput[]
}

export type productStarPercentUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput> | Prisma.productStarPercentCreateWithoutProductInput[] | Prisma.productStarPercentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarPercentCreateOrConnectWithoutProductInput | Prisma.productStarPercentCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.productStarPercentUpsertWithWhereUniqueWithoutProductInput | Prisma.productStarPercentUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.productStarPercentCreateManyProductInputEnvelope
  set?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  disconnect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  delete?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  connect?: Prisma.productStarPercentWhereUniqueInput | Prisma.productStarPercentWhereUniqueInput[]
  update?: Prisma.productStarPercentUpdateWithWhereUniqueWithoutProductInput | Prisma.productStarPercentUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.productStarPercentUpdateManyWithWhereWithoutProductInput | Prisma.productStarPercentUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.productStarPercentScalarWhereInput | Prisma.productStarPercentScalarWhereInput[]
}

export type productStarPercentCreateWithoutProductInput = {
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarPercentUncheckedCreateWithoutProductInput = {
  id?: number
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarPercentCreateOrConnectWithoutProductInput = {
  where: Prisma.productStarPercentWhereUniqueInput
  create: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput>
}

export type productStarPercentCreateManyProductInputEnvelope = {
  data: Prisma.productStarPercentCreateManyProductInput | Prisma.productStarPercentCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type productStarPercentUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.productStarPercentWhereUniqueInput
  update: Prisma.XOR<Prisma.productStarPercentUpdateWithoutProductInput, Prisma.productStarPercentUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.productStarPercentCreateWithoutProductInput, Prisma.productStarPercentUncheckedCreateWithoutProductInput>
}

export type productStarPercentUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.productStarPercentWhereUniqueInput
  data: Prisma.XOR<Prisma.productStarPercentUpdateWithoutProductInput, Prisma.productStarPercentUncheckedUpdateWithoutProductInput>
}

export type productStarPercentUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.productStarPercentScalarWhereInput
  data: Prisma.XOR<Prisma.productStarPercentUpdateManyMutationInput, Prisma.productStarPercentUncheckedUpdateManyWithoutProductInput>
}

export type productStarPercentScalarWhereInput = {
  AND?: Prisma.productStarPercentScalarWhereInput | Prisma.productStarPercentScalarWhereInput[]
  OR?: Prisma.productStarPercentScalarWhereInput[]
  NOT?: Prisma.productStarPercentScalarWhereInput | Prisma.productStarPercentScalarWhereInput[]
  id?: Prisma.IntFilter<"productStarPercent"> | number
  productId?: Prisma.IntFilter<"productStarPercent"> | number
  times?: Prisma.IntFilter<"productStarPercent"> | number
  star?: Prisma.IntFilter<"productStarPercent"> | number
  createdAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStarPercent"> | Date | string
}

export type productStarPercentCreateManyProductInput = {
  id?: number
  times: number
  star: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarPercentUpdateWithoutProductInput = {
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarPercentUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarPercentUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  times?: Prisma.IntFieldUpdateOperationsInput | number
  star?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type productStarPercentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  times?: boolean
  star?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStarPercent"]>

export type productStarPercentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  times?: boolean
  star?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStarPercent"]>

export type productStarPercentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  times?: boolean
  star?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStarPercent"]>

export type productStarPercentSelectScalar = {
  id?: boolean
  productId?: boolean
  times?: boolean
  star?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type productStarPercentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "times" | "star" | "createdAt" | "updatedAt", ExtArgs["result"]["productStarPercent"]>
export type productStarPercentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type productStarPercentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type productStarPercentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $productStarPercentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "productStarPercent"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    productId: number
    times: number
    star: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["productStarPercent"]>
  composites: {}
}

export type productStarPercentGetPayload<S extends boolean | null | undefined | productStarPercentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload, S>

export type productStarPercentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<productStarPercentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductStarPercentCountAggregateInputType | true
  }

export interface productStarPercentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productStarPercent'], meta: { name: 'productStarPercent' } }
  /**
   * Find zero or one ProductStarPercent that matches the filter.
   * @param {productStarPercentFindUniqueArgs} args - Arguments to find a ProductStarPercent
   * @example
   * // Get one ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends productStarPercentFindUniqueArgs>(args: Prisma.SelectSubset<T, productStarPercentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductStarPercent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {productStarPercentFindUniqueOrThrowArgs} args - Arguments to find a ProductStarPercent
   * @example
   * // Get one ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends productStarPercentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, productStarPercentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStarPercent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentFindFirstArgs} args - Arguments to find a ProductStarPercent
   * @example
   * // Get one ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends productStarPercentFindFirstArgs>(args?: Prisma.SelectSubset<T, productStarPercentFindFirstArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStarPercent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentFindFirstOrThrowArgs} args - Arguments to find a ProductStarPercent
   * @example
   * // Get one ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends productStarPercentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, productStarPercentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductStarPercents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductStarPercents
   * const productStarPercents = await prisma.productStarPercent.findMany()
   * 
   * // Get first 10 ProductStarPercents
   * const productStarPercents = await prisma.productStarPercent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productStarPercentWithIdOnly = await prisma.productStarPercent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends productStarPercentFindManyArgs>(args?: Prisma.SelectSubset<T, productStarPercentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductStarPercent.
   * @param {productStarPercentCreateArgs} args - Arguments to create a ProductStarPercent.
   * @example
   * // Create one ProductStarPercent
   * const ProductStarPercent = await prisma.productStarPercent.create({
   *   data: {
   *     // ... data to create a ProductStarPercent
   *   }
   * })
   * 
   */
  create<T extends productStarPercentCreateArgs>(args: Prisma.SelectSubset<T, productStarPercentCreateArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductStarPercents.
   * @param {productStarPercentCreateManyArgs} args - Arguments to create many ProductStarPercents.
   * @example
   * // Create many ProductStarPercents
   * const productStarPercent = await prisma.productStarPercent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends productStarPercentCreateManyArgs>(args?: Prisma.SelectSubset<T, productStarPercentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductStarPercents and returns the data saved in the database.
   * @param {productStarPercentCreateManyAndReturnArgs} args - Arguments to create many ProductStarPercents.
   * @example
   * // Create many ProductStarPercents
   * const productStarPercent = await prisma.productStarPercent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductStarPercents and only return the `id`
   * const productStarPercentWithIdOnly = await prisma.productStarPercent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends productStarPercentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, productStarPercentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductStarPercent.
   * @param {productStarPercentDeleteArgs} args - Arguments to delete one ProductStarPercent.
   * @example
   * // Delete one ProductStarPercent
   * const ProductStarPercent = await prisma.productStarPercent.delete({
   *   where: {
   *     // ... filter to delete one ProductStarPercent
   *   }
   * })
   * 
   */
  delete<T extends productStarPercentDeleteArgs>(args: Prisma.SelectSubset<T, productStarPercentDeleteArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductStarPercent.
   * @param {productStarPercentUpdateArgs} args - Arguments to update one ProductStarPercent.
   * @example
   * // Update one ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends productStarPercentUpdateArgs>(args: Prisma.SelectSubset<T, productStarPercentUpdateArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductStarPercents.
   * @param {productStarPercentDeleteManyArgs} args - Arguments to filter ProductStarPercents to delete.
   * @example
   * // Delete a few ProductStarPercents
   * const { count } = await prisma.productStarPercent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends productStarPercentDeleteManyArgs>(args?: Prisma.SelectSubset<T, productStarPercentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStarPercents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductStarPercents
   * const productStarPercent = await prisma.productStarPercent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends productStarPercentUpdateManyArgs>(args: Prisma.SelectSubset<T, productStarPercentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStarPercents and returns the data updated in the database.
   * @param {productStarPercentUpdateManyAndReturnArgs} args - Arguments to update many ProductStarPercents.
   * @example
   * // Update many ProductStarPercents
   * const productStarPercent = await prisma.productStarPercent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductStarPercents and only return the `id`
   * const productStarPercentWithIdOnly = await prisma.productStarPercent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends productStarPercentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, productStarPercentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductStarPercent.
   * @param {productStarPercentUpsertArgs} args - Arguments to update or create a ProductStarPercent.
   * @example
   * // Update or create a ProductStarPercent
   * const productStarPercent = await prisma.productStarPercent.upsert({
   *   create: {
   *     // ... data to create a ProductStarPercent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductStarPercent we want to update
   *   }
   * })
   */
  upsert<T extends productStarPercentUpsertArgs>(args: Prisma.SelectSubset<T, productStarPercentUpsertArgs<ExtArgs>>): Prisma.Prisma__productStarPercentClient<runtime.Types.Result.GetResult<Prisma.$productStarPercentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductStarPercents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentCountArgs} args - Arguments to filter ProductStarPercents to count.
   * @example
   * // Count the number of ProductStarPercents
   * const count = await prisma.productStarPercent.count({
   *   where: {
   *     // ... the filter for the ProductStarPercents we want to count
   *   }
   * })
  **/
  count<T extends productStarPercentCountArgs>(
    args?: Prisma.Subset<T, productStarPercentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductStarPercentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductStarPercent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStarPercentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductStarPercentAggregateArgs>(args: Prisma.Subset<T, ProductStarPercentAggregateArgs>): Prisma.PrismaPromise<GetProductStarPercentAggregateType<T>>

  /**
   * Group by ProductStarPercent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarPercentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends productStarPercentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: productStarPercentGroupByArgs['orderBy'] }
      : { orderBy?: productStarPercentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, productStarPercentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductStarPercentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the productStarPercent model
 */
readonly fields: productStarPercentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for productStarPercent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__productStarPercentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the productStarPercent model
 */
export interface productStarPercentFieldRefs {
  readonly id: Prisma.FieldRef<"productStarPercent", 'Int'>
  readonly productId: Prisma.FieldRef<"productStarPercent", 'Int'>
  readonly times: Prisma.FieldRef<"productStarPercent", 'Int'>
  readonly star: Prisma.FieldRef<"productStarPercent", 'Int'>
  readonly createdAt: Prisma.FieldRef<"productStarPercent", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"productStarPercent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * productStarPercent findUnique
 */
export type productStarPercentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter, which productStarPercent to fetch.
   */
  where: Prisma.productStarPercentWhereUniqueInput
}

/**
 * productStarPercent findUniqueOrThrow
 */
export type productStarPercentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter, which productStarPercent to fetch.
   */
  where: Prisma.productStarPercentWhereUniqueInput
}

/**
 * productStarPercent findFirst
 */
export type productStarPercentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter, which productStarPercent to fetch.
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStarPercents to fetch.
   */
  orderBy?: Prisma.productStarPercentOrderByWithRelationInput | Prisma.productStarPercentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for productStarPercents.
   */
  cursor?: Prisma.productStarPercentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStarPercents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStarPercents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of productStarPercents.
   */
  distinct?: Prisma.ProductStarPercentScalarFieldEnum | Prisma.ProductStarPercentScalarFieldEnum[]
}

/**
 * productStarPercent findFirstOrThrow
 */
export type productStarPercentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter, which productStarPercent to fetch.
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStarPercents to fetch.
   */
  orderBy?: Prisma.productStarPercentOrderByWithRelationInput | Prisma.productStarPercentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for productStarPercents.
   */
  cursor?: Prisma.productStarPercentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStarPercents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStarPercents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of productStarPercents.
   */
  distinct?: Prisma.ProductStarPercentScalarFieldEnum | Prisma.ProductStarPercentScalarFieldEnum[]
}

/**
 * productStarPercent findMany
 */
export type productStarPercentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter, which productStarPercents to fetch.
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStarPercents to fetch.
   */
  orderBy?: Prisma.productStarPercentOrderByWithRelationInput | Prisma.productStarPercentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing productStarPercents.
   */
  cursor?: Prisma.productStarPercentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStarPercents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStarPercents.
   */
  skip?: number
  distinct?: Prisma.ProductStarPercentScalarFieldEnum | Prisma.ProductStarPercentScalarFieldEnum[]
}

/**
 * productStarPercent create
 */
export type productStarPercentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * The data needed to create a productStarPercent.
   */
  data: Prisma.XOR<Prisma.productStarPercentCreateInput, Prisma.productStarPercentUncheckedCreateInput>
}

/**
 * productStarPercent createMany
 */
export type productStarPercentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many productStarPercents.
   */
  data: Prisma.productStarPercentCreateManyInput | Prisma.productStarPercentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * productStarPercent createManyAndReturn
 */
export type productStarPercentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * The data used to create many productStarPercents.
   */
  data: Prisma.productStarPercentCreateManyInput | Prisma.productStarPercentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * productStarPercent update
 */
export type productStarPercentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * The data needed to update a productStarPercent.
   */
  data: Prisma.XOR<Prisma.productStarPercentUpdateInput, Prisma.productStarPercentUncheckedUpdateInput>
  /**
   * Choose, which productStarPercent to update.
   */
  where: Prisma.productStarPercentWhereUniqueInput
}

/**
 * productStarPercent updateMany
 */
export type productStarPercentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update productStarPercents.
   */
  data: Prisma.XOR<Prisma.productStarPercentUpdateManyMutationInput, Prisma.productStarPercentUncheckedUpdateManyInput>
  /**
   * Filter which productStarPercents to update
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * Limit how many productStarPercents to update.
   */
  limit?: number
}

/**
 * productStarPercent updateManyAndReturn
 */
export type productStarPercentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * The data used to update productStarPercents.
   */
  data: Prisma.XOR<Prisma.productStarPercentUpdateManyMutationInput, Prisma.productStarPercentUncheckedUpdateManyInput>
  /**
   * Filter which productStarPercents to update
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * Limit how many productStarPercents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * productStarPercent upsert
 */
export type productStarPercentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * The filter to search for the productStarPercent to update in case it exists.
   */
  where: Prisma.productStarPercentWhereUniqueInput
  /**
   * In case the productStarPercent found by the `where` argument doesn't exist, create a new productStarPercent with this data.
   */
  create: Prisma.XOR<Prisma.productStarPercentCreateInput, Prisma.productStarPercentUncheckedCreateInput>
  /**
   * In case the productStarPercent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.productStarPercentUpdateInput, Prisma.productStarPercentUncheckedUpdateInput>
}

/**
 * productStarPercent delete
 */
export type productStarPercentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
  /**
   * Filter which productStarPercent to delete.
   */
  where: Prisma.productStarPercentWhereUniqueInput
}

/**
 * productStarPercent deleteMany
 */
export type productStarPercentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which productStarPercents to delete
   */
  where?: Prisma.productStarPercentWhereInput
  /**
   * Limit how many productStarPercents to delete.
   */
  limit?: number
}

/**
 * productStarPercent without action
 */
export type productStarPercentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStarPercent
   */
  select?: Prisma.productStarPercentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStarPercent
   */
  omit?: Prisma.productStarPercentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarPercentInclude<ExtArgs> | null
}
