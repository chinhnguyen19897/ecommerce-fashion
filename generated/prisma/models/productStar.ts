
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `productStar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model productStar
 * 
 */
export type productStarModel = runtime.Types.Result.DefaultSelection<Prisma.$productStarPayload>

export type AggregateProductStar = {
  _count: ProductStarCountAggregateOutputType | null
  _avg: ProductStarAvgAggregateOutputType | null
  _sum: ProductStarSumAggregateOutputType | null
  _min: ProductStarMinAggregateOutputType | null
  _max: ProductStarMaxAggregateOutputType | null
}

export type ProductStarAvgAggregateOutputType = {
  id: number | null
  productId: number | null
  receivedStars: number | null
}

export type ProductStarSumAggregateOutputType = {
  id: number | null
  productId: number | null
  receivedStars: number | null
}

export type ProductStarMinAggregateOutputType = {
  id: number | null
  productId: number | null
  receivedStars: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductStarMaxAggregateOutputType = {
  id: number | null
  productId: number | null
  receivedStars: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductStarCountAggregateOutputType = {
  id: number
  productId: number
  receivedStars: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProductStarAvgAggregateInputType = {
  id?: true
  productId?: true
  receivedStars?: true
}

export type ProductStarSumAggregateInputType = {
  id?: true
  productId?: true
  receivedStars?: true
}

export type ProductStarMinAggregateInputType = {
  id?: true
  productId?: true
  receivedStars?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductStarMaxAggregateInputType = {
  id?: true
  productId?: true
  receivedStars?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductStarCountAggregateInputType = {
  id?: true
  productId?: true
  receivedStars?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProductStarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which productStar to aggregate.
   */
  where?: Prisma.productStarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStars to fetch.
   */
  orderBy?: Prisma.productStarOrderByWithRelationInput | Prisma.productStarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.productStarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned productStars
  **/
  _count?: true | ProductStarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductStarAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductStarSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductStarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductStarMaxAggregateInputType
}

export type GetProductStarAggregateType<T extends ProductStarAggregateArgs> = {
      [P in keyof T & keyof AggregateProductStar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductStar[P]>
    : Prisma.GetScalarType<T[P], AggregateProductStar[P]>
}




export type productStarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productStarWhereInput
  orderBy?: Prisma.productStarOrderByWithAggregationInput | Prisma.productStarOrderByWithAggregationInput[]
  by: Prisma.ProductStarScalarFieldEnum[] | Prisma.ProductStarScalarFieldEnum
  having?: Prisma.productStarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductStarCountAggregateInputType | true
  _avg?: ProductStarAvgAggregateInputType
  _sum?: ProductStarSumAggregateInputType
  _min?: ProductStarMinAggregateInputType
  _max?: ProductStarMaxAggregateInputType
}

export type ProductStarGroupByOutputType = {
  id: number
  productId: number
  receivedStars: number
  createdAt: Date
  updatedAt: Date
  _count: ProductStarCountAggregateOutputType | null
  _avg: ProductStarAvgAggregateOutputType | null
  _sum: ProductStarSumAggregateOutputType | null
  _min: ProductStarMinAggregateOutputType | null
  _max: ProductStarMaxAggregateOutputType | null
}

type GetProductStarGroupByPayload<T extends productStarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductStarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductStarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductStarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductStarGroupByOutputType[P]>
      }
    >
  > 



export type productStarWhereInput = {
  AND?: Prisma.productStarWhereInput | Prisma.productStarWhereInput[]
  OR?: Prisma.productStarWhereInput[]
  NOT?: Prisma.productStarWhereInput | Prisma.productStarWhereInput[]
  id?: Prisma.IntFilter<"productStar"> | number
  productId?: Prisma.IntFilter<"productStar"> | number
  receivedStars?: Prisma.IntFilter<"productStar"> | number
  createdAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type productStarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
}

export type productStarWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.productStarWhereInput | Prisma.productStarWhereInput[]
  OR?: Prisma.productStarWhereInput[]
  NOT?: Prisma.productStarWhereInput | Prisma.productStarWhereInput[]
  productId?: Prisma.IntFilter<"productStar"> | number
  receivedStars?: Prisma.IntFilter<"productStar"> | number
  createdAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type productStarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.productStarCountOrderByAggregateInput
  _avg?: Prisma.productStarAvgOrderByAggregateInput
  _max?: Prisma.productStarMaxOrderByAggregateInput
  _min?: Prisma.productStarMinOrderByAggregateInput
  _sum?: Prisma.productStarSumOrderByAggregateInput
}

export type productStarScalarWhereWithAggregatesInput = {
  AND?: Prisma.productStarScalarWhereWithAggregatesInput | Prisma.productStarScalarWhereWithAggregatesInput[]
  OR?: Prisma.productStarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.productStarScalarWhereWithAggregatesInput | Prisma.productStarScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"productStar"> | number
  productId?: Prisma.IntWithAggregatesFilter<"productStar"> | number
  receivedStars?: Prisma.IntWithAggregatesFilter<"productStar"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"productStar"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"productStar"> | Date | string
}

export type productStarCreateInput = {
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutStarsInput
}

export type productStarUncheckedCreateInput = {
  id?: number
  productId: number
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarUpdateInput = {
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutStarsNestedInput
}

export type productStarUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarCreateManyInput = {
  id?: number
  productId: number
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarUpdateManyMutationInput = {
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductStarListRelationFilter = {
  every?: Prisma.productStarWhereInput
  some?: Prisma.productStarWhereInput
  none?: Prisma.productStarWhereInput
}

export type productStarOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type productStarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
}

export type productStarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type productStarSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  receivedStars?: Prisma.SortOrder
}

export type productStarCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput> | Prisma.productStarCreateWithoutProductInput[] | Prisma.productStarUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarCreateOrConnectWithoutProductInput | Prisma.productStarCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.productStarCreateManyProductInputEnvelope
  connect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
}

export type productStarUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput> | Prisma.productStarCreateWithoutProductInput[] | Prisma.productStarUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarCreateOrConnectWithoutProductInput | Prisma.productStarCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.productStarCreateManyProductInputEnvelope
  connect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
}

export type productStarUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput> | Prisma.productStarCreateWithoutProductInput[] | Prisma.productStarUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarCreateOrConnectWithoutProductInput | Prisma.productStarCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.productStarUpsertWithWhereUniqueWithoutProductInput | Prisma.productStarUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.productStarCreateManyProductInputEnvelope
  set?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  disconnect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  delete?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  connect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  update?: Prisma.productStarUpdateWithWhereUniqueWithoutProductInput | Prisma.productStarUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.productStarUpdateManyWithWhereWithoutProductInput | Prisma.productStarUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.productStarScalarWhereInput | Prisma.productStarScalarWhereInput[]
}

export type productStarUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput> | Prisma.productStarCreateWithoutProductInput[] | Prisma.productStarUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.productStarCreateOrConnectWithoutProductInput | Prisma.productStarCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.productStarUpsertWithWhereUniqueWithoutProductInput | Prisma.productStarUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.productStarCreateManyProductInputEnvelope
  set?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  disconnect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  delete?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  connect?: Prisma.productStarWhereUniqueInput | Prisma.productStarWhereUniqueInput[]
  update?: Prisma.productStarUpdateWithWhereUniqueWithoutProductInput | Prisma.productStarUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.productStarUpdateManyWithWhereWithoutProductInput | Prisma.productStarUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.productStarScalarWhereInput | Prisma.productStarScalarWhereInput[]
}

export type productStarCreateWithoutProductInput = {
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarUncheckedCreateWithoutProductInput = {
  id?: number
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarCreateOrConnectWithoutProductInput = {
  where: Prisma.productStarWhereUniqueInput
  create: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput>
}

export type productStarCreateManyProductInputEnvelope = {
  data: Prisma.productStarCreateManyProductInput | Prisma.productStarCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type productStarUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.productStarWhereUniqueInput
  update: Prisma.XOR<Prisma.productStarUpdateWithoutProductInput, Prisma.productStarUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.productStarCreateWithoutProductInput, Prisma.productStarUncheckedCreateWithoutProductInput>
}

export type productStarUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.productStarWhereUniqueInput
  data: Prisma.XOR<Prisma.productStarUpdateWithoutProductInput, Prisma.productStarUncheckedUpdateWithoutProductInput>
}

export type productStarUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.productStarScalarWhereInput
  data: Prisma.XOR<Prisma.productStarUpdateManyMutationInput, Prisma.productStarUncheckedUpdateManyWithoutProductInput>
}

export type productStarScalarWhereInput = {
  AND?: Prisma.productStarScalarWhereInput | Prisma.productStarScalarWhereInput[]
  OR?: Prisma.productStarScalarWhereInput[]
  NOT?: Prisma.productStarScalarWhereInput | Prisma.productStarScalarWhereInput[]
  id?: Prisma.IntFilter<"productStar"> | number
  productId?: Prisma.IntFilter<"productStar"> | number
  receivedStars?: Prisma.IntFilter<"productStar"> | number
  createdAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"productStar"> | Date | string
}

export type productStarCreateManyProductInput = {
  id?: number
  receivedStars: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type productStarUpdateWithoutProductInput = {
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type productStarUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  receivedStars?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type productStarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  receivedStars?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStar"]>

export type productStarSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  receivedStars?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStar"]>

export type productStarSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  receivedStars?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStar"]>

export type productStarSelectScalar = {
  id?: boolean
  productId?: boolean
  receivedStars?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type productStarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "receivedStars" | "createdAt" | "updatedAt", ExtArgs["result"]["productStar"]>
export type productStarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type productStarIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type productStarIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $productStarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "productStar"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    productId: number
    receivedStars: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["productStar"]>
  composites: {}
}

export type productStarGetPayload<S extends boolean | null | undefined | productStarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$productStarPayload, S>

export type productStarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<productStarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductStarCountAggregateInputType | true
  }

export interface productStarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productStar'], meta: { name: 'productStar' } }
  /**
   * Find zero or one ProductStar that matches the filter.
   * @param {productStarFindUniqueArgs} args - Arguments to find a ProductStar
   * @example
   * // Get one ProductStar
   * const productStar = await prisma.productStar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends productStarFindUniqueArgs>(args: Prisma.SelectSubset<T, productStarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductStar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {productStarFindUniqueOrThrowArgs} args - Arguments to find a ProductStar
   * @example
   * // Get one ProductStar
   * const productStar = await prisma.productStar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends productStarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, productStarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarFindFirstArgs} args - Arguments to find a ProductStar
   * @example
   * // Get one ProductStar
   * const productStar = await prisma.productStar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends productStarFindFirstArgs>(args?: Prisma.SelectSubset<T, productStarFindFirstArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarFindFirstOrThrowArgs} args - Arguments to find a ProductStar
   * @example
   * // Get one ProductStar
   * const productStar = await prisma.productStar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends productStarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, productStarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductStars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductStars
   * const productStars = await prisma.productStar.findMany()
   * 
   * // Get first 10 ProductStars
   * const productStars = await prisma.productStar.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productStarWithIdOnly = await prisma.productStar.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends productStarFindManyArgs>(args?: Prisma.SelectSubset<T, productStarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductStar.
   * @param {productStarCreateArgs} args - Arguments to create a ProductStar.
   * @example
   * // Create one ProductStar
   * const ProductStar = await prisma.productStar.create({
   *   data: {
   *     // ... data to create a ProductStar
   *   }
   * })
   * 
   */
  create<T extends productStarCreateArgs>(args: Prisma.SelectSubset<T, productStarCreateArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductStars.
   * @param {productStarCreateManyArgs} args - Arguments to create many ProductStars.
   * @example
   * // Create many ProductStars
   * const productStar = await prisma.productStar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends productStarCreateManyArgs>(args?: Prisma.SelectSubset<T, productStarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductStars and returns the data saved in the database.
   * @param {productStarCreateManyAndReturnArgs} args - Arguments to create many ProductStars.
   * @example
   * // Create many ProductStars
   * const productStar = await prisma.productStar.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductStars and only return the `id`
   * const productStarWithIdOnly = await prisma.productStar.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends productStarCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, productStarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductStar.
   * @param {productStarDeleteArgs} args - Arguments to delete one ProductStar.
   * @example
   * // Delete one ProductStar
   * const ProductStar = await prisma.productStar.delete({
   *   where: {
   *     // ... filter to delete one ProductStar
   *   }
   * })
   * 
   */
  delete<T extends productStarDeleteArgs>(args: Prisma.SelectSubset<T, productStarDeleteArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductStar.
   * @param {productStarUpdateArgs} args - Arguments to update one ProductStar.
   * @example
   * // Update one ProductStar
   * const productStar = await prisma.productStar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends productStarUpdateArgs>(args: Prisma.SelectSubset<T, productStarUpdateArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductStars.
   * @param {productStarDeleteManyArgs} args - Arguments to filter ProductStars to delete.
   * @example
   * // Delete a few ProductStars
   * const { count } = await prisma.productStar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends productStarDeleteManyArgs>(args?: Prisma.SelectSubset<T, productStarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductStars
   * const productStar = await prisma.productStar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends productStarUpdateManyArgs>(args: Prisma.SelectSubset<T, productStarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStars and returns the data updated in the database.
   * @param {productStarUpdateManyAndReturnArgs} args - Arguments to update many ProductStars.
   * @example
   * // Update many ProductStars
   * const productStar = await prisma.productStar.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductStars and only return the `id`
   * const productStarWithIdOnly = await prisma.productStar.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends productStarUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, productStarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductStar.
   * @param {productStarUpsertArgs} args - Arguments to update or create a ProductStar.
   * @example
   * // Update or create a ProductStar
   * const productStar = await prisma.productStar.upsert({
   *   create: {
   *     // ... data to create a ProductStar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductStar we want to update
   *   }
   * })
   */
  upsert<T extends productStarUpsertArgs>(args: Prisma.SelectSubset<T, productStarUpsertArgs<ExtArgs>>): Prisma.Prisma__productStarClient<runtime.Types.Result.GetResult<Prisma.$productStarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductStars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarCountArgs} args - Arguments to filter ProductStars to count.
   * @example
   * // Count the number of ProductStars
   * const count = await prisma.productStar.count({
   *   where: {
   *     // ... the filter for the ProductStars we want to count
   *   }
   * })
  **/
  count<T extends productStarCountArgs>(
    args?: Prisma.Subset<T, productStarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductStarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductStar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductStarAggregateArgs>(args: Prisma.Subset<T, ProductStarAggregateArgs>): Prisma.PrismaPromise<GetProductStarAggregateType<T>>

  /**
   * Group by ProductStar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productStarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends productStarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: productStarGroupByArgs['orderBy'] }
      : { orderBy?: productStarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, productStarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductStarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the productStar model
 */
readonly fields: productStarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for productStar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__productStarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the productStar model
 */
export interface productStarFieldRefs {
  readonly id: Prisma.FieldRef<"productStar", 'Int'>
  readonly productId: Prisma.FieldRef<"productStar", 'Int'>
  readonly receivedStars: Prisma.FieldRef<"productStar", 'Int'>
  readonly createdAt: Prisma.FieldRef<"productStar", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"productStar", 'DateTime'>
}
    

// Custom InputTypes
/**
 * productStar findUnique
 */
export type productStarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter, which productStar to fetch.
   */
  where: Prisma.productStarWhereUniqueInput
}

/**
 * productStar findUniqueOrThrow
 */
export type productStarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter, which productStar to fetch.
   */
  where: Prisma.productStarWhereUniqueInput
}

/**
 * productStar findFirst
 */
export type productStarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter, which productStar to fetch.
   */
  where?: Prisma.productStarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStars to fetch.
   */
  orderBy?: Prisma.productStarOrderByWithRelationInput | Prisma.productStarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for productStars.
   */
  cursor?: Prisma.productStarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of productStars.
   */
  distinct?: Prisma.ProductStarScalarFieldEnum | Prisma.ProductStarScalarFieldEnum[]
}

/**
 * productStar findFirstOrThrow
 */
export type productStarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter, which productStar to fetch.
   */
  where?: Prisma.productStarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStars to fetch.
   */
  orderBy?: Prisma.productStarOrderByWithRelationInput | Prisma.productStarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for productStars.
   */
  cursor?: Prisma.productStarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of productStars.
   */
  distinct?: Prisma.ProductStarScalarFieldEnum | Prisma.ProductStarScalarFieldEnum[]
}

/**
 * productStar findMany
 */
export type productStarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter, which productStars to fetch.
   */
  where?: Prisma.productStarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of productStars to fetch.
   */
  orderBy?: Prisma.productStarOrderByWithRelationInput | Prisma.productStarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing productStars.
   */
  cursor?: Prisma.productStarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` productStars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` productStars.
   */
  skip?: number
  distinct?: Prisma.ProductStarScalarFieldEnum | Prisma.ProductStarScalarFieldEnum[]
}

/**
 * productStar create
 */
export type productStarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * The data needed to create a productStar.
   */
  data: Prisma.XOR<Prisma.productStarCreateInput, Prisma.productStarUncheckedCreateInput>
}

/**
 * productStar createMany
 */
export type productStarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many productStars.
   */
  data: Prisma.productStarCreateManyInput | Prisma.productStarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * productStar createManyAndReturn
 */
export type productStarCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * The data used to create many productStars.
   */
  data: Prisma.productStarCreateManyInput | Prisma.productStarCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * productStar update
 */
export type productStarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * The data needed to update a productStar.
   */
  data: Prisma.XOR<Prisma.productStarUpdateInput, Prisma.productStarUncheckedUpdateInput>
  /**
   * Choose, which productStar to update.
   */
  where: Prisma.productStarWhereUniqueInput
}

/**
 * productStar updateMany
 */
export type productStarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update productStars.
   */
  data: Prisma.XOR<Prisma.productStarUpdateManyMutationInput, Prisma.productStarUncheckedUpdateManyInput>
  /**
   * Filter which productStars to update
   */
  where?: Prisma.productStarWhereInput
  /**
   * Limit how many productStars to update.
   */
  limit?: number
}

/**
 * productStar updateManyAndReturn
 */
export type productStarUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * The data used to update productStars.
   */
  data: Prisma.XOR<Prisma.productStarUpdateManyMutationInput, Prisma.productStarUncheckedUpdateManyInput>
  /**
   * Filter which productStars to update
   */
  where?: Prisma.productStarWhereInput
  /**
   * Limit how many productStars to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * productStar upsert
 */
export type productStarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * The filter to search for the productStar to update in case it exists.
   */
  where: Prisma.productStarWhereUniqueInput
  /**
   * In case the productStar found by the `where` argument doesn't exist, create a new productStar with this data.
   */
  create: Prisma.XOR<Prisma.productStarCreateInput, Prisma.productStarUncheckedCreateInput>
  /**
   * In case the productStar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.productStarUpdateInput, Prisma.productStarUncheckedUpdateInput>
}

/**
 * productStar delete
 */
export type productStarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
  /**
   * Filter which productStar to delete.
   */
  where: Prisma.productStarWhereUniqueInput
}

/**
 * productStar deleteMany
 */
export type productStarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which productStars to delete
   */
  where?: Prisma.productStarWhereInput
  /**
   * Limit how many productStars to delete.
   */
  limit?: number
}

/**
 * productStar without action
 */
export type productStarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the productStar
   */
  select?: Prisma.productStarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the productStar
   */
  omit?: Prisma.productStarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productStarInclude<ExtArgs> | null
}
